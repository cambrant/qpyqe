#!/usr/bin/env python
# -*- python -*-

"""
qpyqe.py - simple keyboard/mouse driven command launcher

Copyright (C) 2005 Mathias Dahl
Copyright (C) 2013 Tim Cambrant

Version: 0.1
Keywords: keyboard, command, launcher
Author: Mathias Dahl <mathias.rem0veth1s.dahl@gmail.com>, Tim Cambrant <cambrant@gmail.com>
Maintainer: Tim Cambrant

This is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

This is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
License for more details.
"""

from Tkinter import *
from optparse import OptionParser
import os
from Xlib import display

VERSION = "0.1"

class QPyQe:
    def __init__(self, master):
        self.master = master

        self.useEntry = options.entry

        # Startup position
        self.xpos = options.xpos
        self.ypos = options.ypos

        if options.mousepos or (not self.ypos and not self.ypos):
            pointer_data = display.Display().screen().root.query_pointer()._data
            self.xpos, self.ypos = pointer_data["root_x"], pointer_data["root_y"]

        self.master.geometry('+%s+%s' % (self.xpos, self.ypos))
        master.option_add("*Font", "monospace 9")
        master.resizable(0,0)

        self.frame = Frame(master)

        self.frame.pack(fill = BOTH)

        self.frame.master.title("QPyQe")

        self.frame.master.bind('<FocusOut>', self.exit)

        if self.useEntry:
            # Set width to 0 to limit the window according to listboxWidth
            self.eCommand = Entry(self.frame, width = 0, fg = "#ECCC9A", bg = "#000000")

            self.eCommand.bind('<KeyPress>', self.keyPress)
            self.eCommand.bind('<KeyRelease>', self.keyRelease)

            self.eCommand.pack(side = "top", fill = X)

        listboxHeight = options.height

        if not listboxHeight:
            listboxHeight = len(commands)

        listboxWidth = options.width

		# Find out what window width to set, based on the command lengths.
        if not listboxWidth:
            longest_command = 0
            for line in commands:
                if len(line[0]) > longest_command:
                    longest_command = len(line[0])
            listboxWidth = longest_command

        self.listbox = Listbox(self.frame,
                               selectmode = SINGLE,
                               height = listboxHeight,
                               width = listboxWidth,
                               fg = "#ECCC9A",
                               bg = "#000000",
                               selectforeground = "#ECCC9A",
                               selectbackground = "#000000")

        self.listbox.bind('<<ListboxSelect>>', self.mouseClick)
        self.listbox.pack(side = "top", fill = BOTH, expand = 1)

        if self.useEntry:
	       self.eCommand.focus_set()

        self.matchCommand("")

    def exit(self, event):
        quit()

    def mouseClick(self, event):
        self.executeCommand()

    def keyPress(self, event):
        if event.keysym == "Down":

            listbox_size = self.listbox.size()
            listbox_maxpos = listbox_size - 1

            if self.curr_item < listbox_maxpos:
                self.curr_item = self.curr_item + 1
            elif self.curr_item >= listbox_maxpos:
                self.curr_item = 0

            self.listbox.activate(self.curr_item)

            self.listbox.selection_clear(0,END)
            self.listbox.selection_set(self.curr_item, self.curr_item)

            self.listbox.see(self.listbox.curselection())

        elif event.keysym == "Up":
            listbox_size = self.listbox.size()
            listbox_maxpos = listbox_size - 1

            if self.curr_item > 0:
                self.curr_item = self.curr_item - 1
            elif self.curr_item <= 0:
                self.curr_item = listbox_maxpos

            self.listbox.activate(self.curr_item)

            self.listbox.selection_clear(0,END)
            self.listbox.selection_set(self.curr_item, self.curr_item)

            self.listbox.see(self.listbox.curselection())

        elif event.keysym == "Escape":
            self.master.destroy()

        elif event.keysym == "Tab":
            # Handle tab, send "break" back to stop the default action
            # to happen. In the future, maybe do something cool with
            # it...

            commandName = self.eCommand.get()

            # See if we can do an automatic match for commands with
            # similar names
            if commandName:
                seekLongerMatch = 1
                testStr = ""

                testLen = len(commandName)

                while seekLongerMatch == 1:
                    testStr = matches[0]
                    testStr = testStr[0:testLen]
                    debugMessage("Test length: %i, Test string: %s" % (testLen,testStr))

                    for match in matches:
                        debugMessage("  current: " + match)
                        matchSnippet = match[0:testLen]
                        debugMessage("  snippet: " + matchSnippet)

                        if not matchSnippet == testStr:
                            seekLongerMatch = 0
                            debugMessage("No match")

                    if seekLongerMatch:
                        testLen = testLen + 1

                expandedCommand = matches[0][0:testLen - 1]
                self.eCommand.delete(0, END)
                self.eCommand.insert(0, expandedCommand)
                debugMessage("New command: " + expandedCommand)

            return "break"

        elif event.keysym == "Return":
            self.executeCommand()


    def keyRelease(self, event):
        self.curr_command = self.eCommand.get()

        if not ((event.keysym == "Down") or (event.keysym == "Up")):
            self.matchCommand(self.curr_command)


    def matchCommand(self, commandName):
        globals()["matches"] = []

        for item in commands:
            # If .find returns 0, it means the user input matches from
            # the beginning of the command.
            if (item[0].lower().find(commandName.lower()) == 0) or (commandName == ""):
                matches.append(item[0])

        # Clear listbox and insert matches
        self.listbox.delete(0, END)

        for item in matches:
            self.listbox.insert(END, item)

        self.curr_item = 0

        self.listbox.selection_clear(0,END)
        self.listbox.selection_set(self.curr_item, self.curr_item)

        debugMessage("Matches: %s" % self.listbox.size())

        if self.listbox.size() == 1 and options.auto:
            debugMessage("Single match, automatic execution")
            self.executeCommand()


    def executeCommand(self):
        idx = self.listbox.curselection()
        command = self.listbox.get(idx[0])

        for item in commands:
            if item[0] == command:
                command = item[1].strip()

        if command[len(command) - 1] is not '&':
            command = command + ' &'

        debugMessage("Command to execute: " + command)
        self.master.destroy()
        os.system(command)


def readConfigFile():
    # Did the user specify his own config file?
    fileName = options.config

    if fileName:
        debugMessage("Using config file " + fileName)

        try:
            file = open(fileName)
        except IOError:
            raise "Could not find specified config file " + fileName + "."

    else:
        try:
            file = open(os.getenv("HOME") + "/.qpyqerc")
        except IOError:
            raise "Could not find config file ~/.qpyqerc."

    lines = file.readlines()

    for line in lines:
        # Skip comments and blank lines
        line = line.strip()

        if line.find("#") == -1 and line != "":
            pos = line.find(":")
            name = line[0:pos]
            command = line[pos+1:]
            commands.append([" " + name + " ", command])

    debugMessage("Read %d %s" % (len(commands),"commands."))

    # Shall we sort it?
    if not options.nosort:
        debugMessage("Sorting command list")
        commands.sort()

    file.close()


def debugMessage(message):
    if options.debug:
        print message


def openGUI():
    debugMessage("Opening GUI...")
    root.mainloop()


def getPipe():
    if not hasattr(os, "mkfifo"):
        raise "mkfifo not supported. Listen mode not available."

    # Did the user specify a pipe name?

    home = os.getenv("HOME")

    if home:
        pipeName = home + "/.pyqepipe"

        # First, check if it already exist
        try:
            pipe = open(pipeName, "r")
            debugMessage("Pipe opened.")
        except IOError:
            debugMessage("Could not open pipe %s, creating new one..." % pipeName)
            os.mkfifo(pipeName)
            pipe = open(pipeName, "r")

        return pipe

    else:
        raise "HOME variable not set. Could not created named pipe."

# Main loop

# Create parser
parser = OptionParser()

# Add argument list
parser.add_option("-d", "--debug",  action="store_true",  dest="debug",  help="enable debug output")
parser.add_option("-a", "--auto",   action="store_true",  dest="auto",   help="automatically execute single matches")
parser.add_option("",   "--height", action="store",       dest="height", help="list box height (in text lines)")
parser.add_option("",   "--width",  action="store",       dest="width",  help="list box width (in characters)")
parser.add_option("-x", "--xpos",   action="store",       dest="xpos",   help="x startup position")
parser.add_option("-y", "--ypos",   action="store",       dest="ypos",   help="y startup position")
parser.add_option("-m", "--mousepos", action="store_true",     dest="mousepos", help="position window at mouse cursor")
parser.add_option("",   "--nosort", action="store_true",  dest="nosort", help="do not sort command list")
parser.add_option("-c", "--config", action="store",       dest="config", help="use another config file than ~/.qpykerc")
parser.add_option("-l", "--listen", action="store_true",  dest="listen", help="enable listening mode")
parser.add_option("-e", "--entry", action="store_true",  dest="entry", help="enable the text entry")

# Parse
(options, args) = parser.parse_args()

debugMessage("Debug enabled")

# Parse
(options, args) = parser.parse_args()

commands = []
matches = []

readConfigFile()

# Listen mode or normal startup and run once-mode?
if options.listen:
    debugMessage("Listening...")
    debugMessage("Checking for named pipe...")
    keep_going = 1
    root = Tk()
    pyqe = QPyQe(root)

    # Listen-loop
    while keep_going:
        pipe = getPipe()
        debugMessage("Checking pipe...")
        data = pipe.read()

        if data:
            debugMessage("command: " + data)

            if data.find("quit") == 0:
                debugMessage("Exiting...")
                keep_going = 0
                pipe.close()

            elif data.find("reload") == 0:
                debugMessage("Reloading config...")
                # Clear list and re-read config
                commands = []
                readConfigFile()
                
            elif data.find("open") == 0:
                openGUI()
                debugMessage("GUI done. Creating new root for next invocation...")
                root = Tk()
                pyqe = QPyQe(root)
                debugMessage("Done, GUI prepared.")

            else:
                debugMessage("Unknown command")

    pipe.close()

else:
    debugMessage("Normal startup mode")
    root = Tk()
    pyqe = QPyQe(root)
    openGUI()

